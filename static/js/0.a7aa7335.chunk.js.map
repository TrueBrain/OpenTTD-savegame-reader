{"version":3,"sources":["../../xz-rust/pkg/xz.js","../../xz-rust/pkg/xz_bg.js"],"names":["__wbg_set_wasm","wasm","val","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","stack_pointer","cachedInt32Memory0","getInt32Memory0","Int32Array","decompress","incoming","deferred1_0","deferred1_1","retptr","__wbindgen_add_to_stack_pointer","Error","addBorrowedObject","r0","r1","__wbindgen_free","init","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","__wbg_log_630fedc6cfbd3041","arg0","arg1","console","log","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","ptr1","malloc","realloc","mem","offset","code","charCodeAt","slice","passStringToWasm0","stack","__wbindgen_malloc","__wbindgen_realloc","len1","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","error","__wbindgen_object_drop_ref","__wbg_buffer_5d1b598a01b41a42","__wbg_new_ace717933ad7117f","__wbg_set_74906aa30864df5a","arg2","__wbg_length_f0764416ba5bb237","__wbindgen_throw","__wbindgen_memory"],"mappings":"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","file":"static/js/0.a7aa7335.chunk.js","sourcesContent":["import * as wasm from \"./xz_bg.wasm\";\nimport { __wbg_set_wasm } from \"./xz_bg.js\";\n__wbg_set_wasm(wasm);\nexport * from \"./xz_bg.js\";\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet stack_pointer = 128;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n* @param {Uint8Array} incoming\n* @returns {string}\n*/\nexport function decompress(incoming) {\n    let deferred1_0;\n    let deferred1_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.decompress(retptr, addBorrowedObject(incoming));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        deferred1_0 = r0;\n        deferred1_1 = r1;\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n    }\n}\n\n/**\n*/\nexport function init() {\n    wasm.init();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nexport function __wbg_log_630fedc6cfbd3041(arg0, arg1) {\n    console.log(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len1;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n};\n\nexport function __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbg_buffer_5d1b598a01b41a42(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_ace717933ad7117f(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_74906aa30864df5a(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_length_f0764416ba5bb237(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n"],"sourceRoot":""}