{"version":3,"sources":["Savegame.tsx","Viewer.tsx","App.tsx"],"names":["Savegame","props","useState","isAnalyzing","setIsAnalyzing","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","buffer","result","ArrayBuffer","Promise","resolve","reject","setTimeout","res","decompress","Uint8Array","data","JSON","parse","chunk","index","setData","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","className","Viewer","Main","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAwDeA,MApDf,SAAkBC,GAChB,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAASC,uBAAY,SAACC,GAC1BA,EAAcC,SAAQ,SAACC,GACrB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,WACd,IAAMC,EAASP,EAAOQ,OACtB,GAAe,OAAXD,GAAqBA,aAAkBE,YAiB3C,OAfAf,GAAe,GACO,IAAIgB,SAAQ,SAACC,EAASC,GAC1CC,YAAW,WACT,IAAIC,EAAMC,YAAW,IAAIC,WAAWT,IAChCU,EAAOC,KAAKC,MAAML,GACtB,IAAK,IAAMM,KAASH,EAAI,OACtB,IAAK,IAAMI,KAASJ,EAAI,OAAWG,GACjCH,EAAI,OAAWG,GAAOC,GAASH,KAAKC,MAAMF,EAAI,OAAWG,GAAOC,IAIpE9B,EAAM+B,QAAQL,GACdvB,GAAe,KACd,QAIPM,EAAOuB,kBAAkBxB,QAG1B,CAACR,IACJ,EAAsDiC,YAAY,CAAC7B,WAA3D8B,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACE,qBAAKC,UAAS,sDAAiDD,EAAe,UAAY,YAA1F,SACE,8CAAKC,UAAU,aAAgBH,KAA/B,cACE,qCAAWC,MAETjC,EACE,0EACFkC,EACE,2DACA,sFAAwD,uBAAxD,8D,iBCtCGE,MARf,SAAgBtC,GACd,OACE,qBAAKqC,UAAS,kCAAd,SACE,cAAC,IAAD,CAAUX,KAAM1B,EAAM0B,UCA5B,SAASa,IACP,MAAwBtC,mBAAS,MAAjC,mBAAOyB,EAAP,KAAaK,EAAb,KAEA,OACE,gCACE,8DAAgC,mBAAGS,KAAK,kBAAR,mEAAhC,OACA,cAAC,EAAD,CAAUT,QAASA,IACnB,cAAC,EAAD,CAAQL,KAAMA,OAKpBe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACJ,EAAD,MAEFK,SAASC,eAAe","file":"static/js/5.8d359aac.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport {decompress} from 'xz'\n\nfunction Savegame(props: any) {\n  const [isAnalyzing, setIsAnalyzing] = useState(false)\n\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: File) => {\n      const reader = new FileReader()\n\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onload = () => {\n        const buffer = reader.result\n        if (buffer === null || !(buffer instanceof ArrayBuffer)) return\n\n        setIsAnalyzing(true)\n        const resultPromise = new Promise((resolve, reject) => {\n          setTimeout(() => {\n            let res = decompress(new Uint8Array(buffer))\n            let data = JSON.parse(res)\n            for (const chunk in data[\"chunks\"]) {\n              for (const index in data[\"chunks\"][chunk]) {\n                data[\"chunks\"][chunk][index] = JSON.parse(data[\"chunks\"][chunk][index])\n              }\n            }\n\n            props.setData(data)\n            setIsAnalyzing(false)\n          }, 10);\n        })\n        return resultPromise\n      }\n      reader.readAsArrayBuffer(file)\n    })\n\n  }, [props])\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({onDrop})\n\n  return (\n    <div className={`card border-info container text-center mt-5 ${isDragActive ? \"bg-info\" : \"bg-light\"}`}>\n      <div className=\"card-body\" {...getRootProps()}>\n        <input {...getInputProps()} />\n        {\n          isAnalyzing ?\n            <p>Analyzing ... this might take a while ...</p> :\n          isDragActive ?\n            <p>Drop the savegame here ...</p> :\n            <p>Drag 'n' drop your savegame here, or click to select.<br/>Savegames uploaded here never leave your computer</p>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Savegame;\n","import React from 'react'\nimport JSONTree from 'react-json-tree'\n\nfunction Viewer(props: any) {\n  return (\n    <div className={`card border-info container mt-2`}>\n      <JSONTree data={props.data} />\n    </div>\n  )\n}\n\nexport default Viewer;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Savegame from './Savegame';\nimport Viewer from './Viewer';\n\nfunction Main() {\n  const [data, setData] = useState(null)\n\n  return (\n    <div>\n      <p>Don't have a valid savegame? <a href=\"ottdc_pzsg5.sav\">Download the #openttdcoop ProZone Server Game #5 here</a>.</p>\n      <Savegame setData={setData} />\n      <Viewer data={data} />\n    </div>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}